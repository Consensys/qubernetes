#!/usr/bin/env ruby

require "yaml"
require "erb"
require 'colorize'

# setup the config file to use to generate the kubernetes API resources.
@base_template_path = "templates/k8s"
@config_file = "qubernetes.yaml"
@optional_config_file=ARGV[0]
ARGV.clear


if @optional_config_file != nil
  @config_file = @optional_config_file
end
puts "using config file: " + @config_file
@config                = YAML.load_file(@config_file)

@nodes                 = @config["nodes"] #YAML.load_file("nodes.yaml")["nodes"]
## set defaults for config if not set, else use the values from the config.
def set_node_template_vars(values)
  @Node_UserIdent        = values["Node_UserIdent"]
  @Service_Prefix        = (@Node_UserIdent.upcase).gsub("-", "_")
  @Node_Key_Dir          = values["Key_Dir"]
  @Consensus             = values["quorum"]["quorum"]["consensus"]
  if values["quorum"].key?('tm')
    @Tm_Version            = values["quorum"]["tm"].has_key?('Tm_Version') ?  @config["genesis"]["Tm_Version"] :  values["quorum"]["tm"]["Tm_Version"]
    @Tm_Name               = values["quorum"]["tm"].has_key?('Name') ?  "none" :  values["quorum"]["tm"]["Name"]
  else
    @Tm_Version            = @config["genesis"]["Tm_Version"] 
    @Tm_Name               = "none"
  end
  @Quorum_Version        = values["quorum"]["quorum"]["Quorum_Version"]

  @Geth_Verbosity = 9
  if values["geth"] and values["geth"]["verbosity"]
    @Geth_Verbosity = values["geth"]["verbosity"]
  end

  @Geth_Network_Id = @Chain_Id
  if values["geth"] and values["geth"]["network"] and values["geth"]["network"]["id"]
    @Geth_Network_Id = values["geth"]["network"]["id"]
  end

  @Geth_Startup_Params = ""
  if values["geth"] and values["geth"]["Geth_Startup_Params"]
    @Geth_Startup_Params = values["geth"]["Geth_Startup_Params"]
  end

  @Quorum_Docker_Repo =  "quorumengineering"
  if values.dig("quorum","quorum", "Docker_Repo")
    @Quorum_Docker_Repo = values["quorum"]["quorum"]["Docker_Repo"]
  end
  # Allow the user to set the full repo, e.g. quorum-local, e.g. the case they are using skaffold, or other local dev.
  @Quorum_Docker_Repo_Full = ""
  if values.dig("quorum","quorum", "Docker_Repo_Full")
    @Quorum_Docker_Repo_Full = values["quorum"]["quorum"]["Docker_Repo_Full"]
  end
# default quorumengineering/quorum
  @Tm_Docker_Repo =  "quorumengineering"
  if values.dig("quorum","tm","Docker_Repo")
    @Tm_Docker_Repo = values["quorum"]["tm"]["Docker_Repo"]
  end
  # Allow the user to set the full repo, e.g. tessera-local, e.g. the case they are using skaffold, or other local dev.
  @TM_Docker_Repo_Full = ""
  if values.dig("quorum","tm", "Docker_Repo_Full")
    @TM_Docker_Repo_Full = values["quorum"]["tm"]["Docker_Repo_Full"]
  end
  return
end

# used by quorum-shared-config.yaml.erb and quorum-keystore.yaml.erb to load keys.
@Key_Dir_Base = "out/config"
if @config.dig("config","Key_Dir_Base")
  @Key_Dir_Base  = @config["config"]["Key_Dir_Base"]
end

# used by quorum-shared-config.yaml.erb to load the permissioned-nodes.json in configmaps
@Permissioned_Nodes_File = "out/config/permissioned-nodes.json"
if @config.dig("config","Permissioned_Nodes_File")
  @Permissioned_Nodes_File = @config["config"]["Permissioned_Nodes_File"]
end

# used by quorum-genesis-config.yaml.erb and quorum-shared-config.yaml.erb
@Genesis_File = "out/config/genesis.json"
if @config.dig("config","Genesis_File")
  @Genesis_File = @config["config"]["Genesis_File"]
end

@Chain_Id=1101
if @config["genesis"] and @config["genesis"]["Chain_Id"]
  @Chain_Id = @config["genesis"]["Chain_Id"]
end

# used in quorum-shared-config.yaml.erb to make tessera config available to deployments.
@Tessera_Config_Dir = "out/config"
if @config.dig("config","Tessera_Config_Dir")
  @Tessera_Config_Dir = @config["config"]["Tessera_Config_Dir"]
end

# used in deployment.yaml.erb to set quorum data dir.
@Node_DataDir = "/etc/quorum/qdata"
# if @config["quorum"]["Node_DataDir"]
#   @Node_DataDir = @config["quorum"]["Node_DataDir"]
# end

## default the ports if they aren't set
@Raft_Port = 50401
# if @config["quorum"]["quorum"]["Raft_Port"]
#   @Raft_Port = @config["quorum"]["quorum"]["Raft_Port"]
# end

@Tm_Port = 9001
# if @config["quorum"]["tm"]["Port"]
#   @Tm_Port = @config["quorum"]["tm"]["Port"]
# end

@Tm_3Party_Port = 9080
# if @config["quorum"]["tm"]["3Party_Port"]
#   @Tm_3Party_Port = @config["quorum"]["tm"]["3Party_Port"]
# end

@Node_RPCPort = 8545
# if @config["geth"] and @config["geth"]["Node_RPCPort"]
#   @Node_RPCPort = @config["geth"]["Node_RPCPort"]
# end

@Node_WSPort = 8546
# if @config["geth"] and @config["geth"]["Node_WSPort"]
#   @Node_WSPort = @config["geth"]["Node_WSPort"]
# end

@NodeP2P_ListenAddr = 30303
# if @config["geth"] and @config["geth"]["NodeP2P_ListenAddr"]
#   @NodeP2P_ListenAddr = @config["geth"]["NodeP2P_ListenAddr"]
# end


# Generate deployments in a single file, or in separate files.
@sep_deployment_files=true
if @config["k8s"] and @config["k8s"]["sep_deployment_files"] != nil
  @sep_deployment_files = @config["k8s"]["sep_deployment_files"]
end

# If the namespace is set in the config, create it and add it to all the resources.
@Namespace = ""
if @config["k8s"] and @config["k8s"]["namespace"] != nil and @config["k8s"]["namespace"] != ""
@Namespace = "namespace: " + @config["k8s"]["namespace"]
end

# What kind of persistent storage is desired?
# Supported storage type as of 2020 March 11 is only Persistant Volume Claims, and hostPath is no longer supported.
@Storage_Type          = "PVC"

#####################
# Create config files for each node
#####################




# create the output directory if it doesn't exist
`mkdir -p out`

@base_template_path = "templates/k8s"

if @Namespace != ""
  File.open("out/00-namespace.yaml", "w") do |f|
    f.puts (ERB.new(File.read(@base_template_path  + "/namespace.yaml.erb"), nil, "-").result)
  end
end

puts "PVC"

if @Storage_Type == "PVC"
  # there is a custom storage class set, e.g. for EKS storage class.
  if  @config.dig("k8s", "storage", "PVC", "storageClass","template")
    @storage_class_template = @config["k8s"]["storage"]["PVC"]["storageClass"]["template"]
    # add the storage to the persistent-volumes.yamll
    File.open("out/00-quorum-persistent-volumes.yaml", "w") do |f|
      f.puts (ERB.new(File.read(@base_template_path + "/storage-classes/" + @storage_class_template + ".yaml.erb"), nil, "-").result)
    end
    # append the pvc to the persistent-volumes.yaml
    File.open("out/00-quorum-persistent-volumes.yaml", "a") do |f|
      f.puts (ERB.new(File.read(@base_template_path + "/persistent-volumes.yaml.erb"), nil, "-").result)
    end
  else
    # only write the PVC to the persistent-volumes.yaml
    File.open("out/00-quorum-persistent-volumes.yaml", "w") do |f|
      f.puts (ERB.new(File.read(@base_template_path + "/persistent-volumes.yaml.erb"), nil, "-").result)
    end
  end
end

File.open("out/01-quorum-genesis.yaml", "w") do |f|
  f.puts (ERB.new(File.read(@base_template_path + "/quorum-genesis-config.yaml.erb"), nil, "-").result)
end
File.open("out/02-quorum-shared-config.yaml", "w") do |f|
  f.puts (ERB.new(File.read(@base_template_path + "/quorum-shared-config.yaml.erb"), nil, "-").result)
end

# Create the service resources, this are the URLs, ports, etc. by which the network communicates internally, and which 
# describe how to connect to the network externally.
File.open("out/03.0-quorum-services.yaml", "w") do |f|
  f.puts (ERB.new(File.read(@base_template_path + "/quorum-services.yaml.erb"), nil, "-").result)
end

# Create the Ingress resources if they are configured
if @config["k8s"] and @config["k8s"]["service"] and @config["k8s"]["service"]["Ingress"]
  File.open("out/03.1-quorum-ingress.yaml", "w") do |f|
    f.puts (ERB.new(File.read(@base_template_path + "/quorum-ingress.yaml.erb"), nil, "-").result)
  end
end

# make all keystore resources (configMap)
File.open("out/04-quorum-keyconfigs.yaml", "w") do |f|
  f.puts (ERB.new(File.read(@base_template_path + "/quorum-keystore.yaml.erb"), nil, "-").result)
end

# if a network policy was requested create one for the namespace (NetworkPolicy = true in yaml config)
if  @config.dig("k8s","service","NetworkPolicy")
  File.open("out/05-quorum-network-policy.yaml", "w") do |f|
    f.puts (ERB.new(File.read(@base_template_path + "/network-policy.yaml.erb"), nil, "-").result)
  end
end

puts "deployments"
@Kubectl_Cmd="  $> kubectl apply -f out"
if @sep_deployment_files
  `mkdir -p out/deployments`
  @nodes.each do |node|
    set_node_template_vars(node)
    # create each deployment in a separate file.
    File.open("out/deployments/" + @Node_UserIdent + "-quorum-deployment.yaml", "w") do |f|
      f.puts (ERB.new(File.read(@base_template_path + "/quorum-deployment.yaml.erb"), nil, "-").result)
    end
  end
  @Kubectl_Cmd="  $> kubectl apply -f out -f out/deployments"
else
  File.open("out/05-quorum-deployments.yaml", "w") do |f|
    f.puts("---")
  end
  @nodes.each do |node|
    set_node_template_vars(node)
    # create each deployment in a same file.
    File.open("out/05-quorum-deployments.yaml", "a") do |f|
      f.puts (ERB.new(File.read(@base_template_path + "/quorum-deployment.yaml.erb"), nil, "-").result)
      f.puts("---")
    end
  end
end

# End of core quorum network resources.
# The following are ancillary quorum deployments for monitoring, metrics, etc.

if @config["prometheus"]
  `rm -f out/config/prometheus.yml`
  File.open("out/config/prometheus.yml", "a") do |f|
    f.puts (ERB.new(File.read("templates/monitor/prometheus.yml.erb"), nil, "-").result)
  end

  `rm -f out/06-quorum-monitor.yaml`
  File.open("out/06-quorum-monitor.yaml", "a") do |f|
    f.puts (ERB.new(File.read(@base_template_path + "/monitor.yaml.erb"), nil, "-").result)
    f.puts("---")
  end
end

## deploy cakeshop as a deployment if enabled
if @config["cakeshop"] and @config["cakeshop"]["version"]
  `rm -f out/config/cakeshop-nodes.json`
  File.open("out/config/cakeshop-nodes.json", "a") do |f|
    f.puts (ERB.new(File.read("templates/cakeshop/cakeshop-nodes.json.erb"), nil, "-").result)
  end
  
  File.open("out/07-cakeshop.yaml", "w") do |f|
    f.puts (ERB.new(File.read(@base_template_path + "/cakeshop.yaml.erb"), nil, "-").result)
    f.puts("---")
  end
end

puts("\n")
puts "  Success! ".green
puts("\n")
puts("  Quorum Kubernetes resource files have been generated in the `out/` directory.")
puts("\n")
puts("  To deploy to kubernetes run:")
puts("\n")
puts(@Kubectl_Cmd)
puts("\n")
